schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  """User address"""
  id: ID!
  """Timestamp at which account first interacted with Polymarket"""
  creationTimestamp: BigInt!
  """Timestamp at which account most recently interacted with Polymarket"""
  lastSeenTimestamp: BigInt!
  """Total volume of this user's trades in USDC base units"""
  collateralVolume: BigInt!
  """Total number of trades performed by this user"""
  numTrades: BigInt!
  """Total volume of this user's trades in USDC scaled by 10^6"""
  scaledCollateralVolume: BigDecimal!
  """Timestamp of last Buy or Sell transaction"""
  lastTradedTimestamp: BigInt!
  """Markets in which user has provided liquidity"""
  fpmmPoolMemberships(skip: Int = 0, first: Int = 100, orderBy: FpmmPoolMembership_orderBy, orderDirection: OrderDirection, where: FpmmPoolMembership_filter): [FpmmPoolMembership!]
  """Markets in which the user has taken a position on the outcome"""
  marketPositions(skip: Int = 0, first: Int = 100, orderBy: MarketPosition_orderBy, orderDirection: OrderDirection, where: MarketPosition_filter): [MarketPosition!]
  """Purchases and sales of shares by the user"""
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]
  """Split of collateral / outcome tokens into multiple positions"""
  splits(skip: Int = 0, first: Int = 100, orderBy: Split_orderBy, orderDirection: OrderDirection, where: Split_filter): [Split!]
  """
  Merge of more specific outcome tokens into collateral / more general outcome tokens
  """
  merges(skip: Int = 0, first: Int = 100, orderBy: Merge_orderBy, orderDirection: OrderDirection, where: Merge_filter): [Merge!]
  """Redemption of underlying collateral after a market has resolved"""
  redemptions(skip: Int = 0, first: Int = 100, orderBy: Redemption_orderBy, orderDirection: OrderDirection, where: Redemption_filter): [Redemption!]
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  lastSeenTimestamp: BigInt
  lastSeenTimestamp_not: BigInt
  lastSeenTimestamp_gt: BigInt
  lastSeenTimestamp_lt: BigInt
  lastSeenTimestamp_gte: BigInt
  lastSeenTimestamp_lte: BigInt
  lastSeenTimestamp_in: [BigInt!]
  lastSeenTimestamp_not_in: [BigInt!]
  collateralVolume: BigInt
  collateralVolume_not: BigInt
  collateralVolume_gt: BigInt
  collateralVolume_lt: BigInt
  collateralVolume_gte: BigInt
  collateralVolume_lte: BigInt
  collateralVolume_in: [BigInt!]
  collateralVolume_not_in: [BigInt!]
  numTrades: BigInt
  numTrades_not: BigInt
  numTrades_gt: BigInt
  numTrades_lt: BigInt
  numTrades_gte: BigInt
  numTrades_lte: BigInt
  numTrades_in: [BigInt!]
  numTrades_not_in: [BigInt!]
  scaledCollateralVolume: BigDecimal
  scaledCollateralVolume_not: BigDecimal
  scaledCollateralVolume_gt: BigDecimal
  scaledCollateralVolume_lt: BigDecimal
  scaledCollateralVolume_gte: BigDecimal
  scaledCollateralVolume_lte: BigDecimal
  scaledCollateralVolume_in: [BigDecimal!]
  scaledCollateralVolume_not_in: [BigDecimal!]
  lastTradedTimestamp: BigInt
  lastTradedTimestamp_not: BigInt
  lastTradedTimestamp_gt: BigInt
  lastTradedTimestamp_lt: BigInt
  lastTradedTimestamp_gte: BigInt
  lastTradedTimestamp_lte: BigInt
  lastTradedTimestamp_in: [BigInt!]
  lastTradedTimestamp_not_in: [BigInt!]
  fpmmPoolMemberships_: FpmmPoolMembership_filter
  marketPositions_: MarketPosition_filter
  transactions_: Transaction_filter
  splits_: Split_filter
  merges_: Merge_filter
  redemptions_: Redemption_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  creationTimestamp
  lastSeenTimestamp
  collateralVolume
  numTrades
  scaledCollateralVolume
  lastTradedTimestamp
  fpmmPoolMemberships
  marketPositions
  transactions
  splits
  merges
  redemptions
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Collateral {
  """Token address"""
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

input Collateral_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Collateral_filter]
  or: [Collateral_filter]
}

enum Collateral_orderBy {
  id
  name
  symbol
  decimals
}

type Condition {
  id: ID!
  """Address which can resolve this condition"""
  oracle: Bytes!
  """Question ID which corresponds to this condition"""
  questionId: Bytes!
  """Number of possible outcomes for this condition"""
  outcomeSlotCount: Int!
  """Timestamp at which this condition was resolved"""
  resolutionTimestamp: BigInt
  """Fraction of collateral assigned to each outcome"""
  payouts: [BigDecimal!]
  payoutNumerators: [BigInt!]
  payoutDenominator: BigInt
  """Market makers which are trading on this condition"""
  fixedProductMarketMakers(skip: Int = 0, first: Int = 100, orderBy: FixedProductMarketMaker_orderBy, orderDirection: OrderDirection, where: FixedProductMarketMaker_filter): [FixedProductMarketMaker!]!
  """Hash of the resolution transaction"""
  resolutionHash: Bytes
}

input Condition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  oracle: Bytes
  oracle_not: Bytes
  oracle_gt: Bytes
  oracle_lt: Bytes
  oracle_gte: Bytes
  oracle_lte: Bytes
  oracle_in: [Bytes!]
  oracle_not_in: [Bytes!]
  oracle_contains: Bytes
  oracle_not_contains: Bytes
  questionId: Bytes
  questionId_not: Bytes
  questionId_gt: Bytes
  questionId_lt: Bytes
  questionId_gte: Bytes
  questionId_lte: Bytes
  questionId_in: [Bytes!]
  questionId_not_in: [Bytes!]
  questionId_contains: Bytes
  questionId_not_contains: Bytes
  outcomeSlotCount: Int
  outcomeSlotCount_not: Int
  outcomeSlotCount_gt: Int
  outcomeSlotCount_lt: Int
  outcomeSlotCount_gte: Int
  outcomeSlotCount_lte: Int
  outcomeSlotCount_in: [Int!]
  outcomeSlotCount_not_in: [Int!]
  resolutionTimestamp: BigInt
  resolutionTimestamp_not: BigInt
  resolutionTimestamp_gt: BigInt
  resolutionTimestamp_lt: BigInt
  resolutionTimestamp_gte: BigInt
  resolutionTimestamp_lte: BigInt
  resolutionTimestamp_in: [BigInt!]
  resolutionTimestamp_not_in: [BigInt!]
  payouts: [BigDecimal!]
  payouts_not: [BigDecimal!]
  payouts_contains: [BigDecimal!]
  payouts_contains_nocase: [BigDecimal!]
  payouts_not_contains: [BigDecimal!]
  payouts_not_contains_nocase: [BigDecimal!]
  payoutNumerators: [BigInt!]
  payoutNumerators_not: [BigInt!]
  payoutNumerators_contains: [BigInt!]
  payoutNumerators_contains_nocase: [BigInt!]
  payoutNumerators_not_contains: [BigInt!]
  payoutNumerators_not_contains_nocase: [BigInt!]
  payoutDenominator: BigInt
  payoutDenominator_not: BigInt
  payoutDenominator_gt: BigInt
  payoutDenominator_lt: BigInt
  payoutDenominator_gte: BigInt
  payoutDenominator_lte: BigInt
  payoutDenominator_in: [BigInt!]
  payoutDenominator_not_in: [BigInt!]
  fixedProductMarketMakers: [String!]
  fixedProductMarketMakers_not: [String!]
  fixedProductMarketMakers_contains: [String!]
  fixedProductMarketMakers_contains_nocase: [String!]
  fixedProductMarketMakers_not_contains: [String!]
  fixedProductMarketMakers_not_contains_nocase: [String!]
  fixedProductMarketMakers_: FixedProductMarketMaker_filter
  resolutionHash: Bytes
  resolutionHash_not: Bytes
  resolutionHash_gt: Bytes
  resolutionHash_lt: Bytes
  resolutionHash_gte: Bytes
  resolutionHash_lte: Bytes
  resolutionHash_in: [Bytes!]
  resolutionHash_not_in: [Bytes!]
  resolutionHash_contains: Bytes
  resolutionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Condition_filter]
  or: [Condition_filter]
}

enum Condition_orderBy {
  id
  oracle
  questionId
  outcomeSlotCount
  resolutionTimestamp
  payouts
  payoutNumerators
  payoutDenominator
  fixedProductMarketMakers
  resolutionHash
}

type FilledOrder {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which transaction occurred"""
  timestamp: BigInt!
  """Addresses of the maker and the taker"""
  maker: Account!
  taker: Account!
  """Order bytes"""
  orderHash: Bytes!
  """Market which transaction is interacting with"""
  market: FilledOrderBook!
  """Buy or Sell transaction"""
  side: TradeType!
  """Amount of collateral in trade"""
  size: BigInt!
  """Price of the conditional token"""
  price: BigDecimal!
}

type FilledOrderBook {
  """Token Id"""
  id: ID!
  """Buy orders"""
  buys(skip: Int = 0, first: Int = 100, orderBy: FilledOrder_orderBy, orderDirection: OrderDirection, where: FilledOrder_filter): [FilledOrder!]!
  """Sell orders"""
  sells(skip: Int = 0, first: Int = 100, orderBy: FilledOrder_orderBy, orderDirection: OrderDirection, where: FilledOrder_filter): [FilledOrder!]!
  """Number of trades of any kind against this order book"""
  tradesQuantity: BigInt!
  """Number of purchases of shares from this order book"""
  buysQuantity: BigInt!
  """Number of sales of shares to this order book"""
  sellsQuantity: BigInt!
  """Market volume in terms of the underlying collateral value"""
  collateralVolume: BigInt!
  """Volume scaled by the number of decimals of collateralToken"""
  scaledCollateralVolume: BigDecimal!
  """Global volume of share purchases in USDC base units"""
  collateralBuyVolume: BigInt!
  """Global volume of share purchases in USDC scaled by 10^6"""
  scaledCollateralBuyVolume: BigDecimal!
  """Global volume of share sales in USDC base units"""
  collateralSellVolume: BigInt!
  """Global volume of share sales in USDC scaled by 10^6"""
  scaledCollateralSellVolume: BigDecimal!
  """Timestamp of last day during which someone made a trade"""
  lastActiveDay: BigInt!
}

input FilledOrderBook_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  buys: [String!]
  buys_not: [String!]
  buys_contains: [String!]
  buys_contains_nocase: [String!]
  buys_not_contains: [String!]
  buys_not_contains_nocase: [String!]
  buys_: FilledOrder_filter
  sells: [String!]
  sells_not: [String!]
  sells_contains: [String!]
  sells_contains_nocase: [String!]
  sells_not_contains: [String!]
  sells_not_contains_nocase: [String!]
  sells_: FilledOrder_filter
  tradesQuantity: BigInt
  tradesQuantity_not: BigInt
  tradesQuantity_gt: BigInt
  tradesQuantity_lt: BigInt
  tradesQuantity_gte: BigInt
  tradesQuantity_lte: BigInt
  tradesQuantity_in: [BigInt!]
  tradesQuantity_not_in: [BigInt!]
  buysQuantity: BigInt
  buysQuantity_not: BigInt
  buysQuantity_gt: BigInt
  buysQuantity_lt: BigInt
  buysQuantity_gte: BigInt
  buysQuantity_lte: BigInt
  buysQuantity_in: [BigInt!]
  buysQuantity_not_in: [BigInt!]
  sellsQuantity: BigInt
  sellsQuantity_not: BigInt
  sellsQuantity_gt: BigInt
  sellsQuantity_lt: BigInt
  sellsQuantity_gte: BigInt
  sellsQuantity_lte: BigInt
  sellsQuantity_in: [BigInt!]
  sellsQuantity_not_in: [BigInt!]
  collateralVolume: BigInt
  collateralVolume_not: BigInt
  collateralVolume_gt: BigInt
  collateralVolume_lt: BigInt
  collateralVolume_gte: BigInt
  collateralVolume_lte: BigInt
  collateralVolume_in: [BigInt!]
  collateralVolume_not_in: [BigInt!]
  scaledCollateralVolume: BigDecimal
  scaledCollateralVolume_not: BigDecimal
  scaledCollateralVolume_gt: BigDecimal
  scaledCollateralVolume_lt: BigDecimal
  scaledCollateralVolume_gte: BigDecimal
  scaledCollateralVolume_lte: BigDecimal
  scaledCollateralVolume_in: [BigDecimal!]
  scaledCollateralVolume_not_in: [BigDecimal!]
  collateralBuyVolume: BigInt
  collateralBuyVolume_not: BigInt
  collateralBuyVolume_gt: BigInt
  collateralBuyVolume_lt: BigInt
  collateralBuyVolume_gte: BigInt
  collateralBuyVolume_lte: BigInt
  collateralBuyVolume_in: [BigInt!]
  collateralBuyVolume_not_in: [BigInt!]
  scaledCollateralBuyVolume: BigDecimal
  scaledCollateralBuyVolume_not: BigDecimal
  scaledCollateralBuyVolume_gt: BigDecimal
  scaledCollateralBuyVolume_lt: BigDecimal
  scaledCollateralBuyVolume_gte: BigDecimal
  scaledCollateralBuyVolume_lte: BigDecimal
  scaledCollateralBuyVolume_in: [BigDecimal!]
  scaledCollateralBuyVolume_not_in: [BigDecimal!]
  collateralSellVolume: BigInt
  collateralSellVolume_not: BigInt
  collateralSellVolume_gt: BigInt
  collateralSellVolume_lt: BigInt
  collateralSellVolume_gte: BigInt
  collateralSellVolume_lte: BigInt
  collateralSellVolume_in: [BigInt!]
  collateralSellVolume_not_in: [BigInt!]
  scaledCollateralSellVolume: BigDecimal
  scaledCollateralSellVolume_not: BigDecimal
  scaledCollateralSellVolume_gt: BigDecimal
  scaledCollateralSellVolume_lt: BigDecimal
  scaledCollateralSellVolume_gte: BigDecimal
  scaledCollateralSellVolume_lte: BigDecimal
  scaledCollateralSellVolume_in: [BigDecimal!]
  scaledCollateralSellVolume_not_in: [BigDecimal!]
  lastActiveDay: BigInt
  lastActiveDay_not: BigInt
  lastActiveDay_gt: BigInt
  lastActiveDay_lt: BigInt
  lastActiveDay_gte: BigInt
  lastActiveDay_lte: BigInt
  lastActiveDay_in: [BigInt!]
  lastActiveDay_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FilledOrderBook_filter]
  or: [FilledOrderBook_filter]
}

enum FilledOrderBook_orderBy {
  id
  buys
  sells
  tradesQuantity
  buysQuantity
  sellsQuantity
  collateralVolume
  scaledCollateralVolume
  collateralBuyVolume
  scaledCollateralBuyVolume
  collateralSellVolume
  scaledCollateralSellVolume
  lastActiveDay
}

type FilledOrderGlobal {
  """ID is empty string, this is a singleton"""
  id: ID!
  """Number of trades of any kind for all order books"""
  tradesQuantity: BigInt!
  """Number of purchases of shares from any order book"""
  buysQuantity: BigInt!
  """Number of sales of shares to any order book"""
  sellsQuantity: BigInt!
  """Global volume in USDC base units"""
  collateralVolume: BigDecimal!
  """Global volume in USDC scaled by 10^6"""
  scaledCollateralVolume: BigDecimal!
  """Global volume of share purchases in USDC base units"""
  collateralBuyVolume: BigDecimal!
  """Global volume of share purchases in USDC scaled by 10^6"""
  scaledCollateralBuyVolume: BigDecimal!
  """Global volume of share sales in USDC base units"""
  collateralSellVolume: BigDecimal!
  """Global volume of share sales in USDC scaled by 10^6"""
  scaledCollateralSellVolume: BigDecimal!
}

input FilledOrderGlobal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tradesQuantity: BigInt
  tradesQuantity_not: BigInt
  tradesQuantity_gt: BigInt
  tradesQuantity_lt: BigInt
  tradesQuantity_gte: BigInt
  tradesQuantity_lte: BigInt
  tradesQuantity_in: [BigInt!]
  tradesQuantity_not_in: [BigInt!]
  buysQuantity: BigInt
  buysQuantity_not: BigInt
  buysQuantity_gt: BigInt
  buysQuantity_lt: BigInt
  buysQuantity_gte: BigInt
  buysQuantity_lte: BigInt
  buysQuantity_in: [BigInt!]
  buysQuantity_not_in: [BigInt!]
  sellsQuantity: BigInt
  sellsQuantity_not: BigInt
  sellsQuantity_gt: BigInt
  sellsQuantity_lt: BigInt
  sellsQuantity_gte: BigInt
  sellsQuantity_lte: BigInt
  sellsQuantity_in: [BigInt!]
  sellsQuantity_not_in: [BigInt!]
  collateralVolume: BigDecimal
  collateralVolume_not: BigDecimal
  collateralVolume_gt: BigDecimal
  collateralVolume_lt: BigDecimal
  collateralVolume_gte: BigDecimal
  collateralVolume_lte: BigDecimal
  collateralVolume_in: [BigDecimal!]
  collateralVolume_not_in: [BigDecimal!]
  scaledCollateralVolume: BigDecimal
  scaledCollateralVolume_not: BigDecimal
  scaledCollateralVolume_gt: BigDecimal
  scaledCollateralVolume_lt: BigDecimal
  scaledCollateralVolume_gte: BigDecimal
  scaledCollateralVolume_lte: BigDecimal
  scaledCollateralVolume_in: [BigDecimal!]
  scaledCollateralVolume_not_in: [BigDecimal!]
  collateralBuyVolume: BigDecimal
  collateralBuyVolume_not: BigDecimal
  collateralBuyVolume_gt: BigDecimal
  collateralBuyVolume_lt: BigDecimal
  collateralBuyVolume_gte: BigDecimal
  collateralBuyVolume_lte: BigDecimal
  collateralBuyVolume_in: [BigDecimal!]
  collateralBuyVolume_not_in: [BigDecimal!]
  scaledCollateralBuyVolume: BigDecimal
  scaledCollateralBuyVolume_not: BigDecimal
  scaledCollateralBuyVolume_gt: BigDecimal
  scaledCollateralBuyVolume_lt: BigDecimal
  scaledCollateralBuyVolume_gte: BigDecimal
  scaledCollateralBuyVolume_lte: BigDecimal
  scaledCollateralBuyVolume_in: [BigDecimal!]
  scaledCollateralBuyVolume_not_in: [BigDecimal!]
  collateralSellVolume: BigDecimal
  collateralSellVolume_not: BigDecimal
  collateralSellVolume_gt: BigDecimal
  collateralSellVolume_lt: BigDecimal
  collateralSellVolume_gte: BigDecimal
  collateralSellVolume_lte: BigDecimal
  collateralSellVolume_in: [BigDecimal!]
  collateralSellVolume_not_in: [BigDecimal!]
  scaledCollateralSellVolume: BigDecimal
  scaledCollateralSellVolume_not: BigDecimal
  scaledCollateralSellVolume_gt: BigDecimal
  scaledCollateralSellVolume_lt: BigDecimal
  scaledCollateralSellVolume_gte: BigDecimal
  scaledCollateralSellVolume_lte: BigDecimal
  scaledCollateralSellVolume_in: [BigDecimal!]
  scaledCollateralSellVolume_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FilledOrderGlobal_filter]
  or: [FilledOrderGlobal_filter]
}

enum FilledOrderGlobal_orderBy {
  id
  tradesQuantity
  buysQuantity
  sellsQuantity
  collateralVolume
  scaledCollateralVolume
  collateralBuyVolume
  scaledCollateralBuyVolume
  collateralSellVolume
  scaledCollateralSellVolume
}

input FilledOrder_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  maker: String
  maker_not: String
  maker_gt: String
  maker_lt: String
  maker_gte: String
  maker_lte: String
  maker_in: [String!]
  maker_not_in: [String!]
  maker_contains: String
  maker_contains_nocase: String
  maker_not_contains: String
  maker_not_contains_nocase: String
  maker_starts_with: String
  maker_starts_with_nocase: String
  maker_not_starts_with: String
  maker_not_starts_with_nocase: String
  maker_ends_with: String
  maker_ends_with_nocase: String
  maker_not_ends_with: String
  maker_not_ends_with_nocase: String
  maker_: Account_filter
  taker: String
  taker_not: String
  taker_gt: String
  taker_lt: String
  taker_gte: String
  taker_lte: String
  taker_in: [String!]
  taker_not_in: [String!]
  taker_contains: String
  taker_contains_nocase: String
  taker_not_contains: String
  taker_not_contains_nocase: String
  taker_starts_with: String
  taker_starts_with_nocase: String
  taker_not_starts_with: String
  taker_not_starts_with_nocase: String
  taker_ends_with: String
  taker_ends_with_nocase: String
  taker_not_ends_with: String
  taker_not_ends_with_nocase: String
  taker_: Account_filter
  orderHash: Bytes
  orderHash_not: Bytes
  orderHash_gt: Bytes
  orderHash_lt: Bytes
  orderHash_gte: Bytes
  orderHash_lte: Bytes
  orderHash_in: [Bytes!]
  orderHash_not_in: [Bytes!]
  orderHash_contains: Bytes
  orderHash_not_contains: Bytes
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: FilledOrderBook_filter
  side: TradeType
  side_not: TradeType
  side_in: [TradeType!]
  side_not_in: [TradeType!]
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FilledOrder_filter]
  or: [FilledOrder_filter]
}

enum FilledOrder_orderBy {
  id
  timestamp
  maker
  maker__id
  maker__creationTimestamp
  maker__lastSeenTimestamp
  maker__collateralVolume
  maker__numTrades
  maker__scaledCollateralVolume
  maker__lastTradedTimestamp
  taker
  taker__id
  taker__creationTimestamp
  taker__lastSeenTimestamp
  taker__collateralVolume
  taker__numTrades
  taker__scaledCollateralVolume
  taker__lastTradedTimestamp
  orderHash
  market
  market__id
  market__tradesQuantity
  market__buysQuantity
  market__sellsQuantity
  market__collateralVolume
  market__scaledCollateralVolume
  market__collateralBuyVolume
  market__scaledCollateralBuyVolume
  market__collateralSellVolume
  market__scaledCollateralSellVolume
  market__lastActiveDay
  side
  size
  price
}

type FilledOrdersEvent {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which filled occurred"""
  timestamp: BigInt!
  """Address of the person that placed the market order"""
  taker: Account!
  """
  Address of the asset that the taker is giving away(for buy, it's the collateral, for sell it's the conditional)
  """
  makerAsset: Bytes!
  takerAsset: Bytes!
  """Maker assetId"""
  makerAssetID: BigInt!
  """Taker assetId"""
  takerAssetID: BigInt!
  """Maker amount filled"""
  makerAmountFilled: BigInt!
  """Taker amount filled"""
  takerAmountFilled: BigInt!
  """Fee paid"""
  fee: BigInt!
}

input FilledOrdersEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  taker: String
  taker_not: String
  taker_gt: String
  taker_lt: String
  taker_gte: String
  taker_lte: String
  taker_in: [String!]
  taker_not_in: [String!]
  taker_contains: String
  taker_contains_nocase: String
  taker_not_contains: String
  taker_not_contains_nocase: String
  taker_starts_with: String
  taker_starts_with_nocase: String
  taker_not_starts_with: String
  taker_not_starts_with_nocase: String
  taker_ends_with: String
  taker_ends_with_nocase: String
  taker_not_ends_with: String
  taker_not_ends_with_nocase: String
  taker_: Account_filter
  makerAsset: Bytes
  makerAsset_not: Bytes
  makerAsset_gt: Bytes
  makerAsset_lt: Bytes
  makerAsset_gte: Bytes
  makerAsset_lte: Bytes
  makerAsset_in: [Bytes!]
  makerAsset_not_in: [Bytes!]
  makerAsset_contains: Bytes
  makerAsset_not_contains: Bytes
  takerAsset: Bytes
  takerAsset_not: Bytes
  takerAsset_gt: Bytes
  takerAsset_lt: Bytes
  takerAsset_gte: Bytes
  takerAsset_lte: Bytes
  takerAsset_in: [Bytes!]
  takerAsset_not_in: [Bytes!]
  takerAsset_contains: Bytes
  takerAsset_not_contains: Bytes
  makerAssetID: BigInt
  makerAssetID_not: BigInt
  makerAssetID_gt: BigInt
  makerAssetID_lt: BigInt
  makerAssetID_gte: BigInt
  makerAssetID_lte: BigInt
  makerAssetID_in: [BigInt!]
  makerAssetID_not_in: [BigInt!]
  takerAssetID: BigInt
  takerAssetID_not: BigInt
  takerAssetID_gt: BigInt
  takerAssetID_lt: BigInt
  takerAssetID_gte: BigInt
  takerAssetID_lte: BigInt
  takerAssetID_in: [BigInt!]
  takerAssetID_not_in: [BigInt!]
  makerAmountFilled: BigInt
  makerAmountFilled_not: BigInt
  makerAmountFilled_gt: BigInt
  makerAmountFilled_lt: BigInt
  makerAmountFilled_gte: BigInt
  makerAmountFilled_lte: BigInt
  makerAmountFilled_in: [BigInt!]
  makerAmountFilled_not_in: [BigInt!]
  takerAmountFilled: BigInt
  takerAmountFilled_not: BigInt
  takerAmountFilled_gt: BigInt
  takerAmountFilled_lt: BigInt
  takerAmountFilled_gte: BigInt
  takerAmountFilled_lte: BigInt
  takerAmountFilled_in: [BigInt!]
  takerAmountFilled_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FilledOrdersEvent_filter]
  or: [FilledOrdersEvent_filter]
}

enum FilledOrdersEvent_orderBy {
  id
  timestamp
  taker
  taker__id
  taker__creationTimestamp
  taker__lastSeenTimestamp
  taker__collateralVolume
  taker__numTrades
  taker__scaledCollateralVolume
  taker__lastTradedTimestamp
  makerAsset
  takerAsset
  makerAssetID
  takerAssetID
  makerAmountFilled
  takerAmountFilled
  fee
}

type FixedProductMarketMaker {
  """Market maker address"""
  id: ID!
  """Address which deployed this market"""
  creator: Bytes!
  """Time at which this market was deployed"""
  creationTimestamp: BigInt!
  """Hash of deployment transactions"""
  creationTransactionHash: Bytes!
  """Token which is colleralising this market"""
  collateralToken: Collateral!
  """Conditions which this market is trading against"""
  conditions(skip: Int = 0, first: Int = 100, orderBy: Condition_orderBy, orderDirection: OrderDirection, where: Condition_filter): [Condition!]
  """
  Percentage fee of trades taken by market maker. A 2% fee is represented as 2*10^16
  """
  fee: BigInt!
  """Number of trades of any kind against this market maker"""
  tradesQuantity: BigInt!
  """Number of purchases of shares from this market maker"""
  buysQuantity: BigInt!
  """Number of sales of shares to this market maker"""
  sellsQuantity: BigInt!
  """Number of times liquidity has been added to this market maker"""
  liquidityAddQuantity: BigInt!
  """Number of times liquidity has been removed from this market maker"""
  liquidityRemoveQuantity: BigInt!
  """Market volume in terms of the underlying collateral value"""
  collateralVolume: BigInt!
  """Volume scaled by the number of decimals of collateralToken"""
  scaledCollateralVolume: BigDecimal!
  """Global volume of share purchases in USDC base units"""
  collateralBuyVolume: BigInt!
  """Global volume of share purchases in USDC scaled by 10^6"""
  scaledCollateralBuyVolume: BigDecimal!
  """Global volume of share sales in USDC base units"""
  collateralSellVolume: BigInt!
  """Global volume of share sales in USDC scaled by 10^6"""
  scaledCollateralSellVolume: BigDecimal!
  """Fees collected in terms of the underlying collateral value"""
  feeVolume: BigInt!
  """Fees scaled by the number of decimals of collateralToken"""
  scaledFeeVolume: BigDecimal!
  """Constant product parameter k"""
  liquidityParameter: BigInt!
  scaledLiquidityParameter: BigDecimal!
  """Balances of each outcome token held by the market maker"""
  outcomeTokenAmounts: [BigInt!]!
  """Prices at which market maker values each outcome token"""
  outcomeTokenPrices: [BigDecimal!]!
  """Number of outcomes which this market maker is trading"""
  outcomeSlotCount: Int
  """Timestamp of last day during which someone made a trade"""
  lastActiveDay: BigInt!
  """Number of shares for tokens in the market maker's reserves"""
  totalSupply: BigInt!
  """Addresses which are supplying liquidity to the market maker"""
  poolMembers(skip: Int = 0, first: Int = 100, orderBy: FpmmPoolMembership_orderBy, orderDirection: OrderDirection, where: FpmmPoolMembership_filter): [FpmmPoolMembership!]
}

input FixedProductMarketMaker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  creator: Bytes
  creator_not: Bytes
  creator_gt: Bytes
  creator_lt: Bytes
  creator_gte: Bytes
  creator_lte: Bytes
  creator_in: [Bytes!]
  creator_not_in: [Bytes!]
  creator_contains: Bytes
  creator_not_contains: Bytes
  creationTimestamp: BigInt
  creationTimestamp_not: BigInt
  creationTimestamp_gt: BigInt
  creationTimestamp_lt: BigInt
  creationTimestamp_gte: BigInt
  creationTimestamp_lte: BigInt
  creationTimestamp_in: [BigInt!]
  creationTimestamp_not_in: [BigInt!]
  creationTransactionHash: Bytes
  creationTransactionHash_not: Bytes
  creationTransactionHash_gt: Bytes
  creationTransactionHash_lt: Bytes
  creationTransactionHash_gte: Bytes
  creationTransactionHash_lte: Bytes
  creationTransactionHash_in: [Bytes!]
  creationTransactionHash_not_in: [Bytes!]
  creationTransactionHash_contains: Bytes
  creationTransactionHash_not_contains: Bytes
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Collateral_filter
  conditions_: Condition_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  tradesQuantity: BigInt
  tradesQuantity_not: BigInt
  tradesQuantity_gt: BigInt
  tradesQuantity_lt: BigInt
  tradesQuantity_gte: BigInt
  tradesQuantity_lte: BigInt
  tradesQuantity_in: [BigInt!]
  tradesQuantity_not_in: [BigInt!]
  buysQuantity: BigInt
  buysQuantity_not: BigInt
  buysQuantity_gt: BigInt
  buysQuantity_lt: BigInt
  buysQuantity_gte: BigInt
  buysQuantity_lte: BigInt
  buysQuantity_in: [BigInt!]
  buysQuantity_not_in: [BigInt!]
  sellsQuantity: BigInt
  sellsQuantity_not: BigInt
  sellsQuantity_gt: BigInt
  sellsQuantity_lt: BigInt
  sellsQuantity_gte: BigInt
  sellsQuantity_lte: BigInt
  sellsQuantity_in: [BigInt!]
  sellsQuantity_not_in: [BigInt!]
  liquidityAddQuantity: BigInt
  liquidityAddQuantity_not: BigInt
  liquidityAddQuantity_gt: BigInt
  liquidityAddQuantity_lt: BigInt
  liquidityAddQuantity_gte: BigInt
  liquidityAddQuantity_lte: BigInt
  liquidityAddQuantity_in: [BigInt!]
  liquidityAddQuantity_not_in: [BigInt!]
  liquidityRemoveQuantity: BigInt
  liquidityRemoveQuantity_not: BigInt
  liquidityRemoveQuantity_gt: BigInt
  liquidityRemoveQuantity_lt: BigInt
  liquidityRemoveQuantity_gte: BigInt
  liquidityRemoveQuantity_lte: BigInt
  liquidityRemoveQuantity_in: [BigInt!]
  liquidityRemoveQuantity_not_in: [BigInt!]
  collateralVolume: BigInt
  collateralVolume_not: BigInt
  collateralVolume_gt: BigInt
  collateralVolume_lt: BigInt
  collateralVolume_gte: BigInt
  collateralVolume_lte: BigInt
  collateralVolume_in: [BigInt!]
  collateralVolume_not_in: [BigInt!]
  scaledCollateralVolume: BigDecimal
  scaledCollateralVolume_not: BigDecimal
  scaledCollateralVolume_gt: BigDecimal
  scaledCollateralVolume_lt: BigDecimal
  scaledCollateralVolume_gte: BigDecimal
  scaledCollateralVolume_lte: BigDecimal
  scaledCollateralVolume_in: [BigDecimal!]
  scaledCollateralVolume_not_in: [BigDecimal!]
  collateralBuyVolume: BigInt
  collateralBuyVolume_not: BigInt
  collateralBuyVolume_gt: BigInt
  collateralBuyVolume_lt: BigInt
  collateralBuyVolume_gte: BigInt
  collateralBuyVolume_lte: BigInt
  collateralBuyVolume_in: [BigInt!]
  collateralBuyVolume_not_in: [BigInt!]
  scaledCollateralBuyVolume: BigDecimal
  scaledCollateralBuyVolume_not: BigDecimal
  scaledCollateralBuyVolume_gt: BigDecimal
  scaledCollateralBuyVolume_lt: BigDecimal
  scaledCollateralBuyVolume_gte: BigDecimal
  scaledCollateralBuyVolume_lte: BigDecimal
  scaledCollateralBuyVolume_in: [BigDecimal!]
  scaledCollateralBuyVolume_not_in: [BigDecimal!]
  collateralSellVolume: BigInt
  collateralSellVolume_not: BigInt
  collateralSellVolume_gt: BigInt
  collateralSellVolume_lt: BigInt
  collateralSellVolume_gte: BigInt
  collateralSellVolume_lte: BigInt
  collateralSellVolume_in: [BigInt!]
  collateralSellVolume_not_in: [BigInt!]
  scaledCollateralSellVolume: BigDecimal
  scaledCollateralSellVolume_not: BigDecimal
  scaledCollateralSellVolume_gt: BigDecimal
  scaledCollateralSellVolume_lt: BigDecimal
  scaledCollateralSellVolume_gte: BigDecimal
  scaledCollateralSellVolume_lte: BigDecimal
  scaledCollateralSellVolume_in: [BigDecimal!]
  scaledCollateralSellVolume_not_in: [BigDecimal!]
  feeVolume: BigInt
  feeVolume_not: BigInt
  feeVolume_gt: BigInt
  feeVolume_lt: BigInt
  feeVolume_gte: BigInt
  feeVolume_lte: BigInt
  feeVolume_in: [BigInt!]
  feeVolume_not_in: [BigInt!]
  scaledFeeVolume: BigDecimal
  scaledFeeVolume_not: BigDecimal
  scaledFeeVolume_gt: BigDecimal
  scaledFeeVolume_lt: BigDecimal
  scaledFeeVolume_gte: BigDecimal
  scaledFeeVolume_lte: BigDecimal
  scaledFeeVolume_in: [BigDecimal!]
  scaledFeeVolume_not_in: [BigDecimal!]
  liquidityParameter: BigInt
  liquidityParameter_not: BigInt
  liquidityParameter_gt: BigInt
  liquidityParameter_lt: BigInt
  liquidityParameter_gte: BigInt
  liquidityParameter_lte: BigInt
  liquidityParameter_in: [BigInt!]
  liquidityParameter_not_in: [BigInt!]
  scaledLiquidityParameter: BigDecimal
  scaledLiquidityParameter_not: BigDecimal
  scaledLiquidityParameter_gt: BigDecimal
  scaledLiquidityParameter_lt: BigDecimal
  scaledLiquidityParameter_gte: BigDecimal
  scaledLiquidityParameter_lte: BigDecimal
  scaledLiquidityParameter_in: [BigDecimal!]
  scaledLiquidityParameter_not_in: [BigDecimal!]
  outcomeTokenAmounts: [BigInt!]
  outcomeTokenAmounts_not: [BigInt!]
  outcomeTokenAmounts_contains: [BigInt!]
  outcomeTokenAmounts_contains_nocase: [BigInt!]
  outcomeTokenAmounts_not_contains: [BigInt!]
  outcomeTokenAmounts_not_contains_nocase: [BigInt!]
  outcomeTokenPrices: [BigDecimal!]
  outcomeTokenPrices_not: [BigDecimal!]
  outcomeTokenPrices_contains: [BigDecimal!]
  outcomeTokenPrices_contains_nocase: [BigDecimal!]
  outcomeTokenPrices_not_contains: [BigDecimal!]
  outcomeTokenPrices_not_contains_nocase: [BigDecimal!]
  outcomeSlotCount: Int
  outcomeSlotCount_not: Int
  outcomeSlotCount_gt: Int
  outcomeSlotCount_lt: Int
  outcomeSlotCount_gte: Int
  outcomeSlotCount_lte: Int
  outcomeSlotCount_in: [Int!]
  outcomeSlotCount_not_in: [Int!]
  lastActiveDay: BigInt
  lastActiveDay_not: BigInt
  lastActiveDay_gt: BigInt
  lastActiveDay_lt: BigInt
  lastActiveDay_gte: BigInt
  lastActiveDay_lte: BigInt
  lastActiveDay_in: [BigInt!]
  lastActiveDay_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  poolMembers_: FpmmPoolMembership_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FixedProductMarketMaker_filter]
  or: [FixedProductMarketMaker_filter]
}

enum FixedProductMarketMaker_orderBy {
  id
  creator
  creationTimestamp
  creationTransactionHash
  collateralToken
  collateralToken__id
  collateralToken__name
  collateralToken__symbol
  collateralToken__decimals
  conditions
  fee
  tradesQuantity
  buysQuantity
  sellsQuantity
  liquidityAddQuantity
  liquidityRemoveQuantity
  collateralVolume
  scaledCollateralVolume
  collateralBuyVolume
  scaledCollateralBuyVolume
  collateralSellVolume
  scaledCollateralSellVolume
  feeVolume
  scaledFeeVolume
  liquidityParameter
  scaledLiquidityParameter
  outcomeTokenAmounts
  outcomeTokenPrices
  outcomeSlotCount
  lastActiveDay
  totalSupply
  poolMembers
}

type FpmmFundingAddition {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which funding addition occurred"""
  timestamp: BigInt!
  """FPMM to which funding is being added"""
  fpmm: FixedProductMarketMaker!
  """Account adding funding"""
  funder: Account!
  """Outcome tokens amounts added to FPMM"""
  amountsAdded: [BigInt!]!
  """Outcome tokens amounts refunded to funder"""
  amountsRefunded: [BigInt!]!
  """Liquidity shares minted to funder"""
  sharesMinted: BigInt!
}

input FpmmFundingAddition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  fpmm: String
  fpmm_not: String
  fpmm_gt: String
  fpmm_lt: String
  fpmm_gte: String
  fpmm_lte: String
  fpmm_in: [String!]
  fpmm_not_in: [String!]
  fpmm_contains: String
  fpmm_contains_nocase: String
  fpmm_not_contains: String
  fpmm_not_contains_nocase: String
  fpmm_starts_with: String
  fpmm_starts_with_nocase: String
  fpmm_not_starts_with: String
  fpmm_not_starts_with_nocase: String
  fpmm_ends_with: String
  fpmm_ends_with_nocase: String
  fpmm_not_ends_with: String
  fpmm_not_ends_with_nocase: String
  fpmm_: FixedProductMarketMaker_filter
  funder: String
  funder_not: String
  funder_gt: String
  funder_lt: String
  funder_gte: String
  funder_lte: String
  funder_in: [String!]
  funder_not_in: [String!]
  funder_contains: String
  funder_contains_nocase: String
  funder_not_contains: String
  funder_not_contains_nocase: String
  funder_starts_with: String
  funder_starts_with_nocase: String
  funder_not_starts_with: String
  funder_not_starts_with_nocase: String
  funder_ends_with: String
  funder_ends_with_nocase: String
  funder_not_ends_with: String
  funder_not_ends_with_nocase: String
  funder_: Account_filter
  amountsAdded: [BigInt!]
  amountsAdded_not: [BigInt!]
  amountsAdded_contains: [BigInt!]
  amountsAdded_contains_nocase: [BigInt!]
  amountsAdded_not_contains: [BigInt!]
  amountsAdded_not_contains_nocase: [BigInt!]
  amountsRefunded: [BigInt!]
  amountsRefunded_not: [BigInt!]
  amountsRefunded_contains: [BigInt!]
  amountsRefunded_contains_nocase: [BigInt!]
  amountsRefunded_not_contains: [BigInt!]
  amountsRefunded_not_contains_nocase: [BigInt!]
  sharesMinted: BigInt
  sharesMinted_not: BigInt
  sharesMinted_gt: BigInt
  sharesMinted_lt: BigInt
  sharesMinted_gte: BigInt
  sharesMinted_lte: BigInt
  sharesMinted_in: [BigInt!]
  sharesMinted_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmFundingAddition_filter]
  or: [FpmmFundingAddition_filter]
}

enum FpmmFundingAddition_orderBy {
  id
  timestamp
  fpmm
  fpmm__id
  fpmm__creator
  fpmm__creationTimestamp
  fpmm__creationTransactionHash
  fpmm__fee
  fpmm__tradesQuantity
  fpmm__buysQuantity
  fpmm__sellsQuantity
  fpmm__liquidityAddQuantity
  fpmm__liquidityRemoveQuantity
  fpmm__collateralVolume
  fpmm__scaledCollateralVolume
  fpmm__collateralBuyVolume
  fpmm__scaledCollateralBuyVolume
  fpmm__collateralSellVolume
  fpmm__scaledCollateralSellVolume
  fpmm__feeVolume
  fpmm__scaledFeeVolume
  fpmm__liquidityParameter
  fpmm__scaledLiquidityParameter
  fpmm__outcomeSlotCount
  fpmm__lastActiveDay
  fpmm__totalSupply
  funder
  funder__id
  funder__creationTimestamp
  funder__lastSeenTimestamp
  funder__collateralVolume
  funder__numTrades
  funder__scaledCollateralVolume
  funder__lastTradedTimestamp
  amountsAdded
  amountsRefunded
  sharesMinted
}

type FpmmFundingRemoval {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which funding removal occurred"""
  timestamp: BigInt!
  """FPMM to which funding is being removed"""
  fpmm: FixedProductMarketMaker!
  """Account removing funding"""
  funder: Account!
  """Outcome tokens amounts removed from FPMM"""
  amountsRemoved: [BigInt!]!
  collateralRemoved: BigInt!
  """Liquidity shares burned by funder"""
  sharesBurnt: BigInt!
}

input FpmmFundingRemoval_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  fpmm: String
  fpmm_not: String
  fpmm_gt: String
  fpmm_lt: String
  fpmm_gte: String
  fpmm_lte: String
  fpmm_in: [String!]
  fpmm_not_in: [String!]
  fpmm_contains: String
  fpmm_contains_nocase: String
  fpmm_not_contains: String
  fpmm_not_contains_nocase: String
  fpmm_starts_with: String
  fpmm_starts_with_nocase: String
  fpmm_not_starts_with: String
  fpmm_not_starts_with_nocase: String
  fpmm_ends_with: String
  fpmm_ends_with_nocase: String
  fpmm_not_ends_with: String
  fpmm_not_ends_with_nocase: String
  fpmm_: FixedProductMarketMaker_filter
  funder: String
  funder_not: String
  funder_gt: String
  funder_lt: String
  funder_gte: String
  funder_lte: String
  funder_in: [String!]
  funder_not_in: [String!]
  funder_contains: String
  funder_contains_nocase: String
  funder_not_contains: String
  funder_not_contains_nocase: String
  funder_starts_with: String
  funder_starts_with_nocase: String
  funder_not_starts_with: String
  funder_not_starts_with_nocase: String
  funder_ends_with: String
  funder_ends_with_nocase: String
  funder_not_ends_with: String
  funder_not_ends_with_nocase: String
  funder_: Account_filter
  amountsRemoved: [BigInt!]
  amountsRemoved_not: [BigInt!]
  amountsRemoved_contains: [BigInt!]
  amountsRemoved_contains_nocase: [BigInt!]
  amountsRemoved_not_contains: [BigInt!]
  amountsRemoved_not_contains_nocase: [BigInt!]
  collateralRemoved: BigInt
  collateralRemoved_not: BigInt
  collateralRemoved_gt: BigInt
  collateralRemoved_lt: BigInt
  collateralRemoved_gte: BigInt
  collateralRemoved_lte: BigInt
  collateralRemoved_in: [BigInt!]
  collateralRemoved_not_in: [BigInt!]
  sharesBurnt: BigInt
  sharesBurnt_not: BigInt
  sharesBurnt_gt: BigInt
  sharesBurnt_lt: BigInt
  sharesBurnt_gte: BigInt
  sharesBurnt_lte: BigInt
  sharesBurnt_in: [BigInt!]
  sharesBurnt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmFundingRemoval_filter]
  or: [FpmmFundingRemoval_filter]
}

enum FpmmFundingRemoval_orderBy {
  id
  timestamp
  fpmm
  fpmm__id
  fpmm__creator
  fpmm__creationTimestamp
  fpmm__creationTransactionHash
  fpmm__fee
  fpmm__tradesQuantity
  fpmm__buysQuantity
  fpmm__sellsQuantity
  fpmm__liquidityAddQuantity
  fpmm__liquidityRemoveQuantity
  fpmm__collateralVolume
  fpmm__scaledCollateralVolume
  fpmm__collateralBuyVolume
  fpmm__scaledCollateralBuyVolume
  fpmm__collateralSellVolume
  fpmm__scaledCollateralSellVolume
  fpmm__feeVolume
  fpmm__scaledFeeVolume
  fpmm__liquidityParameter
  fpmm__scaledLiquidityParameter
  fpmm__outcomeSlotCount
  fpmm__lastActiveDay
  fpmm__totalSupply
  funder
  funder__id
  funder__creationTimestamp
  funder__lastSeenTimestamp
  funder__collateralVolume
  funder__numTrades
  funder__scaledCollateralVolume
  funder__lastTradedTimestamp
  amountsRemoved
  collateralRemoved
  sharesBurnt
}

type FpmmPoolMembership {
  """funder address + pool address"""
  id: ID!
  """Market to which funder is providing funding"""
  pool: FixedProductMarketMaker!
  """Account which is providing funding"""
  funder: Account!
  """Amount of liquidity tokens owned by funder"""
  amount: BigInt!
}

input FpmmPoolMembership_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: FixedProductMarketMaker_filter
  funder: String
  funder_not: String
  funder_gt: String
  funder_lt: String
  funder_gte: String
  funder_lte: String
  funder_in: [String!]
  funder_not_in: [String!]
  funder_contains: String
  funder_contains_nocase: String
  funder_not_contains: String
  funder_not_contains_nocase: String
  funder_starts_with: String
  funder_starts_with_nocase: String
  funder_not_starts_with: String
  funder_not_starts_with_nocase: String
  funder_ends_with: String
  funder_ends_with_nocase: String
  funder_not_ends_with: String
  funder_not_ends_with_nocase: String
  funder_: Account_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FpmmPoolMembership_filter]
  or: [FpmmPoolMembership_filter]
}

enum FpmmPoolMembership_orderBy {
  id
  pool
  pool__id
  pool__creator
  pool__creationTimestamp
  pool__creationTransactionHash
  pool__fee
  pool__tradesQuantity
  pool__buysQuantity
  pool__sellsQuantity
  pool__liquidityAddQuantity
  pool__liquidityRemoveQuantity
  pool__collateralVolume
  pool__scaledCollateralVolume
  pool__collateralBuyVolume
  pool__scaledCollateralBuyVolume
  pool__collateralSellVolume
  pool__scaledCollateralSellVolume
  pool__feeVolume
  pool__scaledFeeVolume
  pool__liquidityParameter
  pool__scaledLiquidityParameter
  pool__outcomeSlotCount
  pool__lastActiveDay
  pool__totalSupply
  funder
  funder__id
  funder__creationTimestamp
  funder__lastSeenTimestamp
  funder__collateralVolume
  funder__numTrades
  funder__scaledCollateralVolume
  funder__lastTradedTimestamp
  amount
}

type Global {
  """ID is empty string, this is a singleton"""
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
  """Number of unique traders interacting with Polymarket"""
  numTraders: BigInt!
  """Number of trades of any kind for all market makers"""
  tradesQuantity: BigInt!
  """Number of purchases of shares from any market maker"""
  buysQuantity: BigInt!
  """Number of sales of shares to any market maker"""
  sellsQuantity: BigInt!
  """Global volume in USDC base units"""
  collateralVolume: BigInt!
  """Global volume in USDC scaled by 10^6"""
  scaledCollateralVolume: BigDecimal!
  """Global fees in USDC base units"""
  collateralFees: BigInt!
  """Global fees in USDC scaled by 10^6"""
  scaledCollateralFees: BigDecimal!
  """Global volume of share purchases in USDC base units"""
  collateralBuyVolume: BigInt!
  """Global volume of share purchases in USDC scaled by 10^6"""
  scaledCollateralBuyVolume: BigDecimal!
  """Global volume of share sales in USDC base units"""
  collateralSellVolume: BigInt!
  """Global volume of share sales in USDC scaled by 10^6"""
  scaledCollateralSellVolume: BigDecimal!
}

input Global_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  numConditions: Int
  numConditions_not: Int
  numConditions_gt: Int
  numConditions_lt: Int
  numConditions_gte: Int
  numConditions_lte: Int
  numConditions_in: [Int!]
  numConditions_not_in: [Int!]
  numOpenConditions: Int
  numOpenConditions_not: Int
  numOpenConditions_gt: Int
  numOpenConditions_lt: Int
  numOpenConditions_gte: Int
  numOpenConditions_lte: Int
  numOpenConditions_in: [Int!]
  numOpenConditions_not_in: [Int!]
  numClosedConditions: Int
  numClosedConditions_not: Int
  numClosedConditions_gt: Int
  numClosedConditions_lt: Int
  numClosedConditions_gte: Int
  numClosedConditions_lte: Int
  numClosedConditions_in: [Int!]
  numClosedConditions_not_in: [Int!]
  numTraders: BigInt
  numTraders_not: BigInt
  numTraders_gt: BigInt
  numTraders_lt: BigInt
  numTraders_gte: BigInt
  numTraders_lte: BigInt
  numTraders_in: [BigInt!]
  numTraders_not_in: [BigInt!]
  tradesQuantity: BigInt
  tradesQuantity_not: BigInt
  tradesQuantity_gt: BigInt
  tradesQuantity_lt: BigInt
  tradesQuantity_gte: BigInt
  tradesQuantity_lte: BigInt
  tradesQuantity_in: [BigInt!]
  tradesQuantity_not_in: [BigInt!]
  buysQuantity: BigInt
  buysQuantity_not: BigInt
  buysQuantity_gt: BigInt
  buysQuantity_lt: BigInt
  buysQuantity_gte: BigInt
  buysQuantity_lte: BigInt
  buysQuantity_in: [BigInt!]
  buysQuantity_not_in: [BigInt!]
  sellsQuantity: BigInt
  sellsQuantity_not: BigInt
  sellsQuantity_gt: BigInt
  sellsQuantity_lt: BigInt
  sellsQuantity_gte: BigInt
  sellsQuantity_lte: BigInt
  sellsQuantity_in: [BigInt!]
  sellsQuantity_not_in: [BigInt!]
  collateralVolume: BigInt
  collateralVolume_not: BigInt
  collateralVolume_gt: BigInt
  collateralVolume_lt: BigInt
  collateralVolume_gte: BigInt
  collateralVolume_lte: BigInt
  collateralVolume_in: [BigInt!]
  collateralVolume_not_in: [BigInt!]
  scaledCollateralVolume: BigDecimal
  scaledCollateralVolume_not: BigDecimal
  scaledCollateralVolume_gt: BigDecimal
  scaledCollateralVolume_lt: BigDecimal
  scaledCollateralVolume_gte: BigDecimal
  scaledCollateralVolume_lte: BigDecimal
  scaledCollateralVolume_in: [BigDecimal!]
  scaledCollateralVolume_not_in: [BigDecimal!]
  collateralFees: BigInt
  collateralFees_not: BigInt
  collateralFees_gt: BigInt
  collateralFees_lt: BigInt
  collateralFees_gte: BigInt
  collateralFees_lte: BigInt
  collateralFees_in: [BigInt!]
  collateralFees_not_in: [BigInt!]
  scaledCollateralFees: BigDecimal
  scaledCollateralFees_not: BigDecimal
  scaledCollateralFees_gt: BigDecimal
  scaledCollateralFees_lt: BigDecimal
  scaledCollateralFees_gte: BigDecimal
  scaledCollateralFees_lte: BigDecimal
  scaledCollateralFees_in: [BigDecimal!]
  scaledCollateralFees_not_in: [BigDecimal!]
  collateralBuyVolume: BigInt
  collateralBuyVolume_not: BigInt
  collateralBuyVolume_gt: BigInt
  collateralBuyVolume_lt: BigInt
  collateralBuyVolume_gte: BigInt
  collateralBuyVolume_lte: BigInt
  collateralBuyVolume_in: [BigInt!]
  collateralBuyVolume_not_in: [BigInt!]
  scaledCollateralBuyVolume: BigDecimal
  scaledCollateralBuyVolume_not: BigDecimal
  scaledCollateralBuyVolume_gt: BigDecimal
  scaledCollateralBuyVolume_lt: BigDecimal
  scaledCollateralBuyVolume_gte: BigDecimal
  scaledCollateralBuyVolume_lte: BigDecimal
  scaledCollateralBuyVolume_in: [BigDecimal!]
  scaledCollateralBuyVolume_not_in: [BigDecimal!]
  collateralSellVolume: BigInt
  collateralSellVolume_not: BigInt
  collateralSellVolume_gt: BigInt
  collateralSellVolume_lt: BigInt
  collateralSellVolume_gte: BigInt
  collateralSellVolume_lte: BigInt
  collateralSellVolume_in: [BigInt!]
  collateralSellVolume_not_in: [BigInt!]
  scaledCollateralSellVolume: BigDecimal
  scaledCollateralSellVolume_not: BigDecimal
  scaledCollateralSellVolume_gt: BigDecimal
  scaledCollateralSellVolume_lt: BigDecimal
  scaledCollateralSellVolume_gte: BigDecimal
  scaledCollateralSellVolume_lte: BigDecimal
  scaledCollateralSellVolume_in: [BigDecimal!]
  scaledCollateralSellVolume_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Global_filter]
  or: [Global_filter]
}

enum Global_orderBy {
  id
  numConditions
  numOpenConditions
  numClosedConditions
  numTraders
  tradesQuantity
  buysQuantity
  sellsQuantity
  collateralVolume
  scaledCollateralVolume
  collateralFees
  scaledCollateralFees
  collateralBuyVolume
  scaledCollateralBuyVolume
  collateralSellVolume
  scaledCollateralSellVolume
}

"""
8 bytes signed integer

"""
scalar Int8

type MarketPosition {
  id: ID!
  """Market on which this position is on"""
  market: FixedProductMarketMaker!
  """Address which holds this position"""
  user: Account!
  """The outcome which this position is supporting"""
  outcomeIndex: BigInt!
  """Number of outcome shares that the user has ever bought"""
  quantityBought: BigInt!
  """Number of outcome shares that the user has ever sold"""
  quantitySold: BigInt!
  """Number of outcome shares that the user current has"""
  netQuantity: BigInt!
  """Total value of outcome shares that the user has bought"""
  valueBought: BigInt!
  """Total value of outcome shares that the user has sold"""
  valueSold: BigInt!
  """Total value paid by the user to enter this position"""
  netValue: BigInt!
  """Total amount of fees paid by user in relation to this position"""
  feesPaid: BigInt!
}

input MarketPosition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: FixedProductMarketMaker_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: Account_filter
  outcomeIndex: BigInt
  outcomeIndex_not: BigInt
  outcomeIndex_gt: BigInt
  outcomeIndex_lt: BigInt
  outcomeIndex_gte: BigInt
  outcomeIndex_lte: BigInt
  outcomeIndex_in: [BigInt!]
  outcomeIndex_not_in: [BigInt!]
  quantityBought: BigInt
  quantityBought_not: BigInt
  quantityBought_gt: BigInt
  quantityBought_lt: BigInt
  quantityBought_gte: BigInt
  quantityBought_lte: BigInt
  quantityBought_in: [BigInt!]
  quantityBought_not_in: [BigInt!]
  quantitySold: BigInt
  quantitySold_not: BigInt
  quantitySold_gt: BigInt
  quantitySold_lt: BigInt
  quantitySold_gte: BigInt
  quantitySold_lte: BigInt
  quantitySold_in: [BigInt!]
  quantitySold_not_in: [BigInt!]
  netQuantity: BigInt
  netQuantity_not: BigInt
  netQuantity_gt: BigInt
  netQuantity_lt: BigInt
  netQuantity_gte: BigInt
  netQuantity_lte: BigInt
  netQuantity_in: [BigInt!]
  netQuantity_not_in: [BigInt!]
  valueBought: BigInt
  valueBought_not: BigInt
  valueBought_gt: BigInt
  valueBought_lt: BigInt
  valueBought_gte: BigInt
  valueBought_lte: BigInt
  valueBought_in: [BigInt!]
  valueBought_not_in: [BigInt!]
  valueSold: BigInt
  valueSold_not: BigInt
  valueSold_gt: BigInt
  valueSold_lt: BigInt
  valueSold_gte: BigInt
  valueSold_lte: BigInt
  valueSold_in: [BigInt!]
  valueSold_not_in: [BigInt!]
  netValue: BigInt
  netValue_not: BigInt
  netValue_gt: BigInt
  netValue_lt: BigInt
  netValue_gte: BigInt
  netValue_lte: BigInt
  netValue_in: [BigInt!]
  netValue_not_in: [BigInt!]
  feesPaid: BigInt
  feesPaid_not: BigInt
  feesPaid_gt: BigInt
  feesPaid_lt: BigInt
  feesPaid_gte: BigInt
  feesPaid_lte: BigInt
  feesPaid_in: [BigInt!]
  feesPaid_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketPosition_filter]
  or: [MarketPosition_filter]
}

enum MarketPosition_orderBy {
  id
  market
  market__id
  market__creator
  market__creationTimestamp
  market__creationTransactionHash
  market__fee
  market__tradesQuantity
  market__buysQuantity
  market__sellsQuantity
  market__liquidityAddQuantity
  market__liquidityRemoveQuantity
  market__collateralVolume
  market__scaledCollateralVolume
  market__collateralBuyVolume
  market__scaledCollateralBuyVolume
  market__collateralSellVolume
  market__scaledCollateralSellVolume
  market__feeVolume
  market__scaledFeeVolume
  market__liquidityParameter
  market__scaledLiquidityParameter
  market__outcomeSlotCount
  market__lastActiveDay
  market__totalSupply
  user
  user__id
  user__creationTimestamp
  user__lastSeenTimestamp
  user__collateralVolume
  user__numTrades
  user__scaledCollateralVolume
  user__lastTradedTimestamp
  outcomeIndex
  quantityBought
  quantitySold
  netQuantity
  valueBought
  valueSold
  netValue
  feesPaid
}

type Merge {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which merge occurred"""
  timestamp: BigInt!
  """Address which is performing this merge"""
  stakeholder: Account!
  """Token which is collateralising positions being merged"""
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  """Condition on which merge is occuring"""
  condition: Condition!
  partition: [BigInt!]!
  """The amount of outcome tokens being merged"""
  amount: BigInt!
}

input Merge_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  stakeholder: String
  stakeholder_not: String
  stakeholder_gt: String
  stakeholder_lt: String
  stakeholder_gte: String
  stakeholder_lte: String
  stakeholder_in: [String!]
  stakeholder_not_in: [String!]
  stakeholder_contains: String
  stakeholder_contains_nocase: String
  stakeholder_not_contains: String
  stakeholder_not_contains_nocase: String
  stakeholder_starts_with: String
  stakeholder_starts_with_nocase: String
  stakeholder_not_starts_with: String
  stakeholder_not_starts_with_nocase: String
  stakeholder_ends_with: String
  stakeholder_ends_with_nocase: String
  stakeholder_not_ends_with: String
  stakeholder_not_ends_with_nocase: String
  stakeholder_: Account_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Collateral_filter
  parentCollectionId: Bytes
  parentCollectionId_not: Bytes
  parentCollectionId_gt: Bytes
  parentCollectionId_lt: Bytes
  parentCollectionId_gte: Bytes
  parentCollectionId_lte: Bytes
  parentCollectionId_in: [Bytes!]
  parentCollectionId_not_in: [Bytes!]
  parentCollectionId_contains: Bytes
  parentCollectionId_not_contains: Bytes
  condition: String
  condition_not: String
  condition_gt: String
  condition_lt: String
  condition_gte: String
  condition_lte: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_contains: String
  condition_contains_nocase: String
  condition_not_contains: String
  condition_not_contains_nocase: String
  condition_starts_with: String
  condition_starts_with_nocase: String
  condition_not_starts_with: String
  condition_not_starts_with_nocase: String
  condition_ends_with: String
  condition_ends_with_nocase: String
  condition_not_ends_with: String
  condition_not_ends_with_nocase: String
  condition_: Condition_filter
  partition: [BigInt!]
  partition_not: [BigInt!]
  partition_contains: [BigInt!]
  partition_contains_nocase: [BigInt!]
  partition_not_contains: [BigInt!]
  partition_not_contains_nocase: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Merge_filter]
  or: [Merge_filter]
}

enum Merge_orderBy {
  id
  timestamp
  stakeholder
  stakeholder__id
  stakeholder__creationTimestamp
  stakeholder__lastSeenTimestamp
  stakeholder__collateralVolume
  stakeholder__numTrades
  stakeholder__scaledCollateralVolume
  stakeholder__lastTradedTimestamp
  collateralToken
  collateralToken__id
  collateralToken__name
  collateralToken__symbol
  collateralToken__decimals
  parentCollectionId
  condition
  condition__id
  condition__oracle
  condition__questionId
  condition__outcomeSlotCount
  condition__resolutionTimestamp
  condition__payoutDenominator
  condition__resolutionHash
  partition
  amount
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type OrderFilledEvent {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which filled occurred"""
  timestamp: BigInt!
  orderHash: Bytes!
  """Addresses of the maker and the taker"""
  maker: Account!
  taker: Account!
  """
  Address of the asset that the taker is giving away(for buy, it's the collateral, for sell it's the conditional)
  """
  makerAsset: Bytes!
  takerAsset: Bytes!
  """Maker assetId"""
  makerAssetID: BigInt!
  """Taker assetId"""
  takerAssetID: BigInt!
  """Maker amount filled"""
  makerAmountFilled: BigInt!
  """Taker amount filled"""
  takerAmountFilled: BigInt!
  remainingAmount: BigInt!
}

input OrderFilledEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  orderHash: Bytes
  orderHash_not: Bytes
  orderHash_gt: Bytes
  orderHash_lt: Bytes
  orderHash_gte: Bytes
  orderHash_lte: Bytes
  orderHash_in: [Bytes!]
  orderHash_not_in: [Bytes!]
  orderHash_contains: Bytes
  orderHash_not_contains: Bytes
  maker: String
  maker_not: String
  maker_gt: String
  maker_lt: String
  maker_gte: String
  maker_lte: String
  maker_in: [String!]
  maker_not_in: [String!]
  maker_contains: String
  maker_contains_nocase: String
  maker_not_contains: String
  maker_not_contains_nocase: String
  maker_starts_with: String
  maker_starts_with_nocase: String
  maker_not_starts_with: String
  maker_not_starts_with_nocase: String
  maker_ends_with: String
  maker_ends_with_nocase: String
  maker_not_ends_with: String
  maker_not_ends_with_nocase: String
  maker_: Account_filter
  taker: String
  taker_not: String
  taker_gt: String
  taker_lt: String
  taker_gte: String
  taker_lte: String
  taker_in: [String!]
  taker_not_in: [String!]
  taker_contains: String
  taker_contains_nocase: String
  taker_not_contains: String
  taker_not_contains_nocase: String
  taker_starts_with: String
  taker_starts_with_nocase: String
  taker_not_starts_with: String
  taker_not_starts_with_nocase: String
  taker_ends_with: String
  taker_ends_with_nocase: String
  taker_not_ends_with: String
  taker_not_ends_with_nocase: String
  taker_: Account_filter
  makerAsset: Bytes
  makerAsset_not: Bytes
  makerAsset_gt: Bytes
  makerAsset_lt: Bytes
  makerAsset_gte: Bytes
  makerAsset_lte: Bytes
  makerAsset_in: [Bytes!]
  makerAsset_not_in: [Bytes!]
  makerAsset_contains: Bytes
  makerAsset_not_contains: Bytes
  takerAsset: Bytes
  takerAsset_not: Bytes
  takerAsset_gt: Bytes
  takerAsset_lt: Bytes
  takerAsset_gte: Bytes
  takerAsset_lte: Bytes
  takerAsset_in: [Bytes!]
  takerAsset_not_in: [Bytes!]
  takerAsset_contains: Bytes
  takerAsset_not_contains: Bytes
  makerAssetID: BigInt
  makerAssetID_not: BigInt
  makerAssetID_gt: BigInt
  makerAssetID_lt: BigInt
  makerAssetID_gte: BigInt
  makerAssetID_lte: BigInt
  makerAssetID_in: [BigInt!]
  makerAssetID_not_in: [BigInt!]
  takerAssetID: BigInt
  takerAssetID_not: BigInt
  takerAssetID_gt: BigInt
  takerAssetID_lt: BigInt
  takerAssetID_gte: BigInt
  takerAssetID_lte: BigInt
  takerAssetID_in: [BigInt!]
  takerAssetID_not_in: [BigInt!]
  makerAmountFilled: BigInt
  makerAmountFilled_not: BigInt
  makerAmountFilled_gt: BigInt
  makerAmountFilled_lt: BigInt
  makerAmountFilled_gte: BigInt
  makerAmountFilled_lte: BigInt
  makerAmountFilled_in: [BigInt!]
  makerAmountFilled_not_in: [BigInt!]
  takerAmountFilled: BigInt
  takerAmountFilled_not: BigInt
  takerAmountFilled_gt: BigInt
  takerAmountFilled_lt: BigInt
  takerAmountFilled_gte: BigInt
  takerAmountFilled_lte: BigInt
  takerAmountFilled_in: [BigInt!]
  takerAmountFilled_not_in: [BigInt!]
  remainingAmount: BigInt
  remainingAmount_not: BigInt
  remainingAmount_gt: BigInt
  remainingAmount_lt: BigInt
  remainingAmount_gte: BigInt
  remainingAmount_lte: BigInt
  remainingAmount_in: [BigInt!]
  remainingAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrderFilledEvent_filter]
  or: [OrderFilledEvent_filter]
}

enum OrderFilledEvent_orderBy {
  id
  timestamp
  orderHash
  maker
  maker__id
  maker__creationTimestamp
  maker__lastSeenTimestamp
  maker__collateralVolume
  maker__numTrades
  maker__scaledCollateralVolume
  maker__lastTradedTimestamp
  taker
  taker__id
  taker__creationTimestamp
  taker__lastSeenTimestamp
  taker__collateralVolume
  taker__numTrades
  taker__scaledCollateralVolume
  taker__lastTradedTimestamp
  makerAsset
  takerAsset
  makerAssetID
  takerAssetID
  makerAmountFilled
  takerAmountFilled
  remainingAmount
}

type Query {
  global(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Global
  globals(
    skip: Int = 0
    first: Int = 100
    orderBy: Global_orderBy
    orderDirection: OrderDirection
    where: Global_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Global!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  collateral(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collateral
  collaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: Collateral_orderBy
    orderDirection: OrderDirection
    where: Collateral_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collateral!]!
  condition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Condition
  conditions(
    skip: Int = 0
    first: Int = 100
    orderBy: Condition_orderBy
    orderDirection: OrderDirection
    where: Condition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Condition!]!
  split(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Split
  splits(
    skip: Int = 0
    first: Int = 100
    orderBy: Split_orderBy
    orderDirection: OrderDirection
    where: Split_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Split!]!
  merge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Merge
  merges(
    skip: Int = 0
    first: Int = 100
    orderBy: Merge_orderBy
    orderDirection: OrderDirection
    where: Merge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Merge!]!
  redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  fixedProductMarketMaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FixedProductMarketMaker
  fixedProductMarketMakers(
    skip: Int = 0
    first: Int = 100
    orderBy: FixedProductMarketMaker_orderBy
    orderDirection: OrderDirection
    where: FixedProductMarketMaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FixedProductMarketMaker!]!
  marketPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketPosition
  marketPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketPosition_orderBy
    orderDirection: OrderDirection
    where: MarketPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketPosition!]!
  fpmmFundingAddition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmFundingAddition
  fpmmFundingAdditions(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmFundingAddition_orderBy
    orderDirection: OrderDirection
    where: FpmmFundingAddition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmFundingAddition!]!
  fpmmFundingRemoval(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmFundingRemoval
  fpmmFundingRemovals(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmFundingRemoval_orderBy
    orderDirection: OrderDirection
    where: FpmmFundingRemoval_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmFundingRemoval!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  fpmmPoolMembership(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmPoolMembership
  fpmmPoolMemberships(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmPoolMembership_orderBy
    orderDirection: OrderDirection
    where: FpmmPoolMembership_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmPoolMembership!]!
  filledOrderGlobal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrderGlobal
  filledOrderGlobals(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrderGlobal_orderBy
    orderDirection: OrderDirection
    where: FilledOrderGlobal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrderGlobal!]!
  filledOrdersEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrdersEvent
  filledOrdersEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrdersEvent_orderBy
    orderDirection: OrderDirection
    where: FilledOrdersEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrdersEvent!]!
  orderFilledEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderFilledEvent
  orderFilledEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderFilledEvent_orderBy
    orderDirection: OrderDirection
    where: OrderFilledEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderFilledEvent!]!
  filledOrder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrder
  filledOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrder_orderBy
    orderDirection: OrderDirection
    where: FilledOrder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrder!]!
  filledOrderBook(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrderBook
  filledOrderBooks(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrderBook_orderBy
    orderDirection: OrderDirection
    where: FilledOrderBook_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrderBook!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Redemption {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which redemption occurred"""
  timestamp: BigInt!
  """Address which is redeeming these outcomes"""
  redeemer: Account!
  """Token which is being claimed in return for outcome tokens"""
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  """Condition on which redemption is occuring"""
  condition: Condition!
  """Outcomes which are being redeemed"""
  indexSets: [BigInt!]!
  """The amount of collateral being claimed"""
  payout: BigInt!
}

input Redemption_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  redeemer: String
  redeemer_not: String
  redeemer_gt: String
  redeemer_lt: String
  redeemer_gte: String
  redeemer_lte: String
  redeemer_in: [String!]
  redeemer_not_in: [String!]
  redeemer_contains: String
  redeemer_contains_nocase: String
  redeemer_not_contains: String
  redeemer_not_contains_nocase: String
  redeemer_starts_with: String
  redeemer_starts_with_nocase: String
  redeemer_not_starts_with: String
  redeemer_not_starts_with_nocase: String
  redeemer_ends_with: String
  redeemer_ends_with_nocase: String
  redeemer_not_ends_with: String
  redeemer_not_ends_with_nocase: String
  redeemer_: Account_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Collateral_filter
  parentCollectionId: Bytes
  parentCollectionId_not: Bytes
  parentCollectionId_gt: Bytes
  parentCollectionId_lt: Bytes
  parentCollectionId_gte: Bytes
  parentCollectionId_lte: Bytes
  parentCollectionId_in: [Bytes!]
  parentCollectionId_not_in: [Bytes!]
  parentCollectionId_contains: Bytes
  parentCollectionId_not_contains: Bytes
  condition: String
  condition_not: String
  condition_gt: String
  condition_lt: String
  condition_gte: String
  condition_lte: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_contains: String
  condition_contains_nocase: String
  condition_not_contains: String
  condition_not_contains_nocase: String
  condition_starts_with: String
  condition_starts_with_nocase: String
  condition_not_starts_with: String
  condition_not_starts_with_nocase: String
  condition_ends_with: String
  condition_ends_with_nocase: String
  condition_not_ends_with: String
  condition_not_ends_with_nocase: String
  condition_: Condition_filter
  indexSets: [BigInt!]
  indexSets_not: [BigInt!]
  indexSets_contains: [BigInt!]
  indexSets_contains_nocase: [BigInt!]
  indexSets_not_contains: [BigInt!]
  indexSets_not_contains_nocase: [BigInt!]
  payout: BigInt
  payout_not: BigInt
  payout_gt: BigInt
  payout_lt: BigInt
  payout_gte: BigInt
  payout_lte: BigInt
  payout_in: [BigInt!]
  payout_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Redemption_filter]
  or: [Redemption_filter]
}

enum Redemption_orderBy {
  id
  timestamp
  redeemer
  redeemer__id
  redeemer__creationTimestamp
  redeemer__lastSeenTimestamp
  redeemer__collateralVolume
  redeemer__numTrades
  redeemer__scaledCollateralVolume
  redeemer__lastTradedTimestamp
  collateralToken
  collateralToken__id
  collateralToken__name
  collateralToken__symbol
  collateralToken__decimals
  parentCollectionId
  condition
  condition__id
  condition__oracle
  condition__questionId
  condition__outcomeSlotCount
  condition__resolutionTimestamp
  condition__payoutDenominator
  condition__resolutionHash
  indexSets
  payout
}

type Split {
  """Transaction Hash"""
  id: ID!
  """Timestamp at which split occurred"""
  timestamp: BigInt!
  """Address which is performing this split"""
  stakeholder: Account!
  """Token which is collateralising positions being split"""
  collateralToken: Collateral!
  parentCollectionId: Bytes!
  """Condition on which split is occuring"""
  condition: Condition!
  partition: [BigInt!]!
  """The amount of collateral/outcome tokens being split"""
  amount: BigInt!
}

input Split_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  stakeholder: String
  stakeholder_not: String
  stakeholder_gt: String
  stakeholder_lt: String
  stakeholder_gte: String
  stakeholder_lte: String
  stakeholder_in: [String!]
  stakeholder_not_in: [String!]
  stakeholder_contains: String
  stakeholder_contains_nocase: String
  stakeholder_not_contains: String
  stakeholder_not_contains_nocase: String
  stakeholder_starts_with: String
  stakeholder_starts_with_nocase: String
  stakeholder_not_starts_with: String
  stakeholder_not_starts_with_nocase: String
  stakeholder_ends_with: String
  stakeholder_ends_with_nocase: String
  stakeholder_not_ends_with: String
  stakeholder_not_ends_with_nocase: String
  stakeholder_: Account_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: Collateral_filter
  parentCollectionId: Bytes
  parentCollectionId_not: Bytes
  parentCollectionId_gt: Bytes
  parentCollectionId_lt: Bytes
  parentCollectionId_gte: Bytes
  parentCollectionId_lte: Bytes
  parentCollectionId_in: [Bytes!]
  parentCollectionId_not_in: [Bytes!]
  parentCollectionId_contains: Bytes
  parentCollectionId_not_contains: Bytes
  condition: String
  condition_not: String
  condition_gt: String
  condition_lt: String
  condition_gte: String
  condition_lte: String
  condition_in: [String!]
  condition_not_in: [String!]
  condition_contains: String
  condition_contains_nocase: String
  condition_not_contains: String
  condition_not_contains_nocase: String
  condition_starts_with: String
  condition_starts_with_nocase: String
  condition_not_starts_with: String
  condition_not_starts_with_nocase: String
  condition_ends_with: String
  condition_ends_with_nocase: String
  condition_not_ends_with: String
  condition_not_ends_with_nocase: String
  condition_: Condition_filter
  partition: [BigInt!]
  partition_not: [BigInt!]
  partition_contains: [BigInt!]
  partition_contains_nocase: [BigInt!]
  partition_not_contains: [BigInt!]
  partition_not_contains_nocase: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Split_filter]
  or: [Split_filter]
}

enum Split_orderBy {
  id
  timestamp
  stakeholder
  stakeholder__id
  stakeholder__creationTimestamp
  stakeholder__lastSeenTimestamp
  stakeholder__collateralVolume
  stakeholder__numTrades
  stakeholder__scaledCollateralVolume
  stakeholder__lastTradedTimestamp
  collateralToken
  collateralToken__id
  collateralToken__name
  collateralToken__symbol
  collateralToken__decimals
  parentCollectionId
  condition
  condition__id
  condition__oracle
  condition__questionId
  condition__outcomeSlotCount
  condition__resolutionTimestamp
  condition__payoutDenominator
  condition__resolutionHash
  partition
  amount
}

type Subscription {
  global(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Global
  globals(
    skip: Int = 0
    first: Int = 100
    orderBy: Global_orderBy
    orderDirection: OrderDirection
    where: Global_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Global!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  collateral(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Collateral
  collaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: Collateral_orderBy
    orderDirection: OrderDirection
    where: Collateral_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Collateral!]!
  condition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Condition
  conditions(
    skip: Int = 0
    first: Int = 100
    orderBy: Condition_orderBy
    orderDirection: OrderDirection
    where: Condition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Condition!]!
  split(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Split
  splits(
    skip: Int = 0
    first: Int = 100
    orderBy: Split_orderBy
    orderDirection: OrderDirection
    where: Split_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Split!]!
  merge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Merge
  merges(
    skip: Int = 0
    first: Int = 100
    orderBy: Merge_orderBy
    orderDirection: OrderDirection
    where: Merge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Merge!]!
  redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  fixedProductMarketMaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FixedProductMarketMaker
  fixedProductMarketMakers(
    skip: Int = 0
    first: Int = 100
    orderBy: FixedProductMarketMaker_orderBy
    orderDirection: OrderDirection
    where: FixedProductMarketMaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FixedProductMarketMaker!]!
  marketPosition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketPosition
  marketPositions(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketPosition_orderBy
    orderDirection: OrderDirection
    where: MarketPosition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketPosition!]!
  fpmmFundingAddition(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmFundingAddition
  fpmmFundingAdditions(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmFundingAddition_orderBy
    orderDirection: OrderDirection
    where: FpmmFundingAddition_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmFundingAddition!]!
  fpmmFundingRemoval(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmFundingRemoval
  fpmmFundingRemovals(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmFundingRemoval_orderBy
    orderDirection: OrderDirection
    where: FpmmFundingRemoval_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmFundingRemoval!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  fpmmPoolMembership(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FpmmPoolMembership
  fpmmPoolMemberships(
    skip: Int = 0
    first: Int = 100
    orderBy: FpmmPoolMembership_orderBy
    orderDirection: OrderDirection
    where: FpmmPoolMembership_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FpmmPoolMembership!]!
  filledOrderGlobal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrderGlobal
  filledOrderGlobals(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrderGlobal_orderBy
    orderDirection: OrderDirection
    where: FilledOrderGlobal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrderGlobal!]!
  filledOrdersEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrdersEvent
  filledOrdersEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrdersEvent_orderBy
    orderDirection: OrderDirection
    where: FilledOrdersEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrdersEvent!]!
  orderFilledEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrderFilledEvent
  orderFilledEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: OrderFilledEvent_orderBy
    orderDirection: OrderDirection
    where: OrderFilledEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OrderFilledEvent!]!
  filledOrder(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrder
  filledOrders(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrder_orderBy
    orderDirection: OrderDirection
    where: FilledOrder_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrder!]!
  filledOrderBook(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FilledOrderBook
  filledOrderBooks(
    skip: Int = 0
    first: Int = 100
    orderBy: FilledOrderBook_orderBy
    orderDirection: OrderDirection
    where: FilledOrderBook_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FilledOrderBook!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

enum TradeType {
  Buy
  Sell
  Limit_Buy
  Limit_Sell
}

type Transaction {
  """Transaction Hash"""
  id: ID!
  """Buy or Sell transaction"""
  type: TradeType!
  """Timestamp at which transaction occurred"""
  timestamp: BigInt!
  """Market which transaction is interacting with"""
  market: FixedProductMarketMaker!
  """Account performing transaction"""
  user: Account!
  """Amount of collateral in trade"""
  tradeAmount: BigInt!
  """Amount of collateral paid in fees"""
  feeAmount: BigInt!
  """Index of outcome token being bought or sold"""
  outcomeIndex: BigInt!
  """Amount of outcome tokens being bought or sold"""
  outcomeTokensAmount: BigInt!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: TradeType
  type_not: TradeType
  type_in: [TradeType!]
  type_not_in: [TradeType!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: FixedProductMarketMaker_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: Account_filter
  tradeAmount: BigInt
  tradeAmount_not: BigInt
  tradeAmount_gt: BigInt
  tradeAmount_lt: BigInt
  tradeAmount_gte: BigInt
  tradeAmount_lte: BigInt
  tradeAmount_in: [BigInt!]
  tradeAmount_not_in: [BigInt!]
  feeAmount: BigInt
  feeAmount_not: BigInt
  feeAmount_gt: BigInt
  feeAmount_lt: BigInt
  feeAmount_gte: BigInt
  feeAmount_lte: BigInt
  feeAmount_in: [BigInt!]
  feeAmount_not_in: [BigInt!]
  outcomeIndex: BigInt
  outcomeIndex_not: BigInt
  outcomeIndex_gt: BigInt
  outcomeIndex_lt: BigInt
  outcomeIndex_gte: BigInt
  outcomeIndex_lte: BigInt
  outcomeIndex_in: [BigInt!]
  outcomeIndex_not_in: [BigInt!]
  outcomeTokensAmount: BigInt
  outcomeTokensAmount_not: BigInt
  outcomeTokensAmount_gt: BigInt
  outcomeTokensAmount_lt: BigInt
  outcomeTokensAmount_gte: BigInt
  outcomeTokensAmount_lte: BigInt
  outcomeTokensAmount_in: [BigInt!]
  outcomeTokensAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  type
  timestamp
  market
  market__id
  market__creator
  market__creationTimestamp
  market__creationTransactionHash
  market__fee
  market__tradesQuantity
  market__buysQuantity
  market__sellsQuantity
  market__liquidityAddQuantity
  market__liquidityRemoveQuantity
  market__collateralVolume
  market__scaledCollateralVolume
  market__collateralBuyVolume
  market__scaledCollateralBuyVolume
  market__collateralSellVolume
  market__scaledCollateralSellVolume
  market__feeVolume
  market__scaledFeeVolume
  market__liquidityParameter
  market__scaledLiquidityParameter
  market__outcomeSlotCount
  market__lastActiveDay
  market__totalSupply
  user
  user__id
  user__creationTimestamp
  user__lastSeenTimestamp
  user__collateralVolume
  user__numTrades
  user__scaledCollateralVolume
  user__lastTradedTimestamp
  tradeAmount
  feeAmount
  outcomeIndex
  outcomeTokensAmount
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}